// schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

model Client {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  credits  Decimal
  Order    Order[]

  @@map(name: "clients")
}

model Supplier {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String
  cnpj          Int             @unique
  DroneInstance DroneInstance[]

  @@map(name: "suppliers")
}

model Order {
  id               Int      @id @default(autoincrement())
  number           Int
  clientId         Int
  status           String
  createdAt        DateTime
  updatedAt        DateTime
  price            Decimal
  pickupLocation   Json
  deliveryLocation Json
  droneInstanceId  Int?

  client        Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  droneInstance DroneInstance? @relation(fields: [droneInstanceId], references: [id], onDelete: SetNull)

  @@map(name: "orders")
}

model DroneInstance {
  id         Int  @id @default(autoincrement())
  region     Json
  supplierId Int
  modelId    Int

  supplier Supplier   @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  model    DroneModel @relation(fields: [modelId], references: [id], onDelete: Cascade)
  Order    Order[]

  @@map(name: "drone_instances")
}

model DroneModel {
  id            Int             @id @default(autoincrement())
  model         String
  weight        Decimal
  capacity      Decimal
  size          String
  composition   String
  image         Bytes?
  DroneInstance DroneInstance[]

  @@map(name: "drone_models")
}
